State 97 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list
    2        | %empty

    3 declaration-list: declaration-list declaration
    4                 | declaration

    5 declaration: var-declaration
    6            | fun-declaration

    7 var-declaration: type-specifier IDENTIFIER SEMI_COLON
    8                | type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS SEMI_COLON

    9 type-specifier: INT
   10               | VOID

   11 fun-declaration: type-specifier IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS compound-stmt

   12 params: param-list
   13       | VOID

   14 param-list: param-list COMMA param
   15           | param

   16 param: type-specifier IDENTIFIER
   17      | type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS CLOSE_SQUARE_BRACKETS

   18 compound-stmt: OPEN_CURLY_BRACE local-declarations statement-list CLOSE_CURLY_BRACE

   19 local-declarations: local-declarations var-declaration
   20                   | %empty

   21 statement-list: statement-list statement
   22               | %empty

   23 statement: expression-stmt
   24          | compound-stmt
   25          | selection-stmt
   26          | iteration-stmt
   27          | return-stmt

   28 expression-stmt: expression SEMI_COLON
   29                | SEMI_COLON

   30 selection-stmt: IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement
   31               | IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement ELSE statement

   32 iteration-stmt: WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement

   33 return-stmt: RETURN SEMI_COLON
   34            | RETURN expression SEMI_COLON

   35 expression: var ASSIGNMENT expression
   36           | simple-expression

   37 var: IDENTIFIER
   38    | IDENTIFIER OPEN_SQUARE_BRACKETS expression CLOSE_SQUARE_BRACKETS

   39 simple-expression: additive-expression relop additive-expression
   40                  | additive-expression

   41 relop: LESS_THAN
   42      | LESS_THAN_OR_EQ
   43      | GREATER_THAN
   44      | GREATER_THAN_OR_EQ
   45      | EQ
   46      | NOT_EQ

   47 additive-expression: additive-expression addop term
   48                    | term

   49 addop: PLUS
   50      | MINUS

   51 term: term mulop factor
   52     | factor

   53 mulop: MUL
   54      | DIV

   55 factor: OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
   56       | var
   57       | call
   58       | NUM

   59 call: IDENTIFIER OPEN_PARANTHESIS args CLOSE_PARANTHESIS

   60 args: arg-list
   61     | %empty

   62 arg-list: arg-list COMMA expression
   63         | expression


Terminals, with rules where they appear

$end (0) 0
error (256)
ELSE (258) 31
IF (259) 30 31
INT (260) 9
RETURN (261) 33 34
VOID (262) 10 13
WHILE (263) 32
PLUS (264) 49
MINUS (265) 50
MUL (266) 53
DIV (267) 54
GREATER_THAN (268) 43
GREATER_THAN_OR_EQ (269) 44
LESS_THAN (270) 41
LESS_THAN_OR_EQ (271) 42
EQ (272) 45
NOT_EQ (273) 46
ASSIGNMENT (274) 35
SEMI_COLON (275) 7 8 28 29 33 34
COMMA (276) 14 62
OPEN_CURLY_BRACE (277) 18
CLOSE_CURLY_BRACE (278) 18
OPEN_PARANTHESIS (279) 11 30 31 32 55 59
CLOSE_PARANTHESIS (280) 11 30 31 32 55 59
OPEN_SQUARE_BRACKETS (281) 8 17 38
CLOSE_SQUARE_BRACKETS (282) 8 17 38
IDENTIFIER (283) 7 8 11 16 17 37 38 59
NUM (284) 8 58


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
program (31)
    on left: 1 2, on right: 0
declaration-list (32)
    on left: 3 4, on right: 1 3
declaration (33)
    on left: 5 6, on right: 3 4
var-declaration (34)
    on left: 7 8, on right: 5 19
type-specifier (35)
    on left: 9 10, on right: 7 8 11 16 17
fun-declaration (36)
    on left: 11, on right: 6
params (37)
    on left: 12 13, on right: 11
param-list (38)
    on left: 14 15, on right: 12 14
param (39)
    on left: 16 17, on right: 14 15
compound-stmt (40)
    on left: 18, on right: 11 24
local-declarations (41)
    on left: 19 20, on right: 18 19
statement-list (42)
    on left: 21 22, on right: 18 21
statement (43)
    on left: 23 24 25 26 27, on right: 21 30 31 32
expression-stmt (44)
    on left: 28 29, on right: 23
selection-stmt (45)
    on left: 30 31, on right: 25
iteration-stmt (46)
    on left: 32, on right: 26
return-stmt (47)
    on left: 33 34, on right: 27
expression (48)
    on left: 35 36, on right: 28 30 31 32 34 35 38 55 62 63
var (49)
    on left: 37 38, on right: 35 56
simple-expression (50)
    on left: 39 40, on right: 36
relop (51)
    on left: 41 42 43 44 45 46, on right: 39
additive-expression (52)
    on left: 47 48, on right: 39 40 47
addop (53)
    on left: 49 50, on right: 47
term (54)
    on left: 51 52, on right: 47 48 51
mulop (55)
    on left: 53 54, on right: 51
factor (56)
    on left: 55 56 57 58, on right: 51 52
call (57)
    on left: 59, on right: 57
args (58)
    on left: 60 61, on right: 59
arg-list (59)
    on left: 62 63, on right: 60 62


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 2 (program)

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

    9 type-specifier: INT .

    $default  reduce using rule 9 (type-specifier)


State 2

   10 type-specifier: VOID .

    $default  reduce using rule 10 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list .
    3 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    4 declaration-list: declaration .

    $default  reduce using rule 4 (declaration-list)


State 6

    5 declaration: var-declaration .

    $default  reduce using rule 5 (declaration)


State 7

    7 var-declaration: type-specifier . IDENTIFIER SEMI_COLON
    8                | type-specifier . IDENTIFIER OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS SEMI_COLON
   11 fun-declaration: type-specifier . IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS compound-stmt

    IDENTIFIER  shift, and go to state 11


State 8

    6 declaration: fun-declaration .

    $default  reduce using rule 6 (declaration)


State 9

    0 $accept: program $end .

    $default  accept


State 10

    3 declaration-list: declaration-list declaration .

    $default  reduce using rule 3 (declaration-list)


State 11

    7 var-declaration: type-specifier IDENTIFIER . SEMI_COLON
    8                | type-specifier IDENTIFIER . OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS SEMI_COLON
   11 fun-declaration: type-specifier IDENTIFIER . OPEN_PARANTHESIS params CLOSE_PARANTHESIS compound-stmt

    SEMI_COLON            shift, and go to state 12
    OPEN_PARANTHESIS      shift, and go to state 13
    OPEN_SQUARE_BRACKETS  shift, and go to state 14


State 12

    7 var-declaration: type-specifier IDENTIFIER SEMI_COLON .

    $default  reduce using rule 7 (var-declaration)


State 13

   11 fun-declaration: type-specifier IDENTIFIER OPEN_PARANTHESIS . params CLOSE_PARANTHESIS compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type-specifier  go to state 16
    params          go to state 17
    param-list      go to state 18
    param           go to state 19


State 14

    8 var-declaration: type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS . NUM CLOSE_SQUARE_BRACKETS SEMI_COLON

    NUM  shift, and go to state 20


State 15

   10 type-specifier: VOID .
   13 params: VOID .

    CLOSE_PARANTHESIS  reduce using rule 13 (params)
    $default           reduce using rule 10 (type-specifier)


State 16

   16 param: type-specifier . IDENTIFIER
   17      | type-specifier . IDENTIFIER OPEN_SQUARE_BRACKETS CLOSE_SQUARE_BRACKETS

    IDENTIFIER  shift, and go to state 21


State 17

   11 fun-declaration: type-specifier IDENTIFIER OPEN_PARANTHESIS params . CLOSE_PARANTHESIS compound-stmt

    CLOSE_PARANTHESIS  shift, and go to state 22


State 18

   12 params: param-list .
   14 param-list: param-list . COMMA param

    COMMA  shift, and go to state 23

    $default  reduce using rule 12 (params)


State 19

   15 param-list: param .

    $default  reduce using rule 15 (param-list)


State 20

    8 var-declaration: type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS NUM . CLOSE_SQUARE_BRACKETS SEMI_COLON

    CLOSE_SQUARE_BRACKETS  shift, and go to state 24


State 21

   16 param: type-specifier IDENTIFIER .
   17      | type-specifier IDENTIFIER . OPEN_SQUARE_BRACKETS CLOSE_SQUARE_BRACKETS

    OPEN_SQUARE_BRACKETS  shift, and go to state 25

    $default  reduce using rule 16 (param)


State 22

   11 fun-declaration: type-specifier IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS . compound-stmt

    OPEN_CURLY_BRACE  shift, and go to state 26

    compound-stmt  go to state 27


State 23

   14 param-list: param-list COMMA . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 16
    param           go to state 28


State 24

    8 var-declaration: type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS . SEMI_COLON

    SEMI_COLON  shift, and go to state 29


State 25

   17 param: type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS . CLOSE_SQUARE_BRACKETS

    CLOSE_SQUARE_BRACKETS  shift, and go to state 30


State 26

   18 compound-stmt: OPEN_CURLY_BRACE . local-declarations statement-list CLOSE_CURLY_BRACE

    $default  reduce using rule 20 (local-declarations)

    local-declarations  go to state 31


State 27

   11 fun-declaration: type-specifier IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS compound-stmt .

    $default  reduce using rule 11 (fun-declaration)


State 28

   14 param-list: param-list COMMA param .

    $default  reduce using rule 14 (param-list)


State 29

    8 var-declaration: type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS SEMI_COLON .

    $default  reduce using rule 8 (var-declaration)


State 30

   17 param: type-specifier IDENTIFIER OPEN_SQUARE_BRACKETS CLOSE_SQUARE_BRACKETS .

    $default  reduce using rule 17 (param)


State 31

   18 compound-stmt: OPEN_CURLY_BRACE local-declarations . statement-list CLOSE_CURLY_BRACE
   19 local-declarations: local-declarations . var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 22 (statement-list)

    var-declaration  go to state 32
    type-specifier   go to state 33
    statement-list   go to state 34


State 32

   19 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 19 (local-declarations)


State 33

    7 var-declaration: type-specifier . IDENTIFIER SEMI_COLON
    8                | type-specifier . IDENTIFIER OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS SEMI_COLON

    IDENTIFIER  shift, and go to state 35


State 34

   18 compound-stmt: OPEN_CURLY_BRACE local-declarations statement-list . CLOSE_CURLY_BRACE
   21 statement-list: statement-list . statement

    IF                 shift, and go to state 36
    RETURN             shift, and go to state 37
    WHILE              shift, and go to state 38
    SEMI_COLON         shift, and go to state 39
    OPEN_CURLY_BRACE   shift, and go to state 26
    CLOSE_CURLY_BRACE  shift, and go to state 40
    OPEN_PARANTHESIS   shift, and go to state 41
    IDENTIFIER         shift, and go to state 42
    NUM                shift, and go to state 43

    compound-stmt        go to state 44
    statement            go to state 45
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 35

    7 var-declaration: type-specifier IDENTIFIER . SEMI_COLON
    8                | type-specifier IDENTIFIER . OPEN_SQUARE_BRACKETS NUM CLOSE_SQUARE_BRACKETS SEMI_COLON

    SEMI_COLON            shift, and go to state 12
    OPEN_SQUARE_BRACKETS  shift, and go to state 14


State 36

   30 selection-stmt: IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement
   31               | IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement ELSE statement

    OPEN_PARANTHESIS  shift, and go to state 57


State 37

   33 return-stmt: RETURN . SEMI_COLON
   34            | RETURN . expression SEMI_COLON

    SEMI_COLON        shift, and go to state 58
    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 59
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 38

   32 iteration-stmt: WHILE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement

    OPEN_PARANTHESIS  shift, and go to state 60


State 39

   29 expression-stmt: SEMI_COLON .

    $default  reduce using rule 29 (expression-stmt)


State 40

   18 compound-stmt: OPEN_CURLY_BRACE local-declarations statement-list CLOSE_CURLY_BRACE .

    $default  reduce using rule 18 (compound-stmt)


State 41

   55 factor: OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 61
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 42

   37 var: IDENTIFIER .
   38    | IDENTIFIER . OPEN_SQUARE_BRACKETS expression CLOSE_SQUARE_BRACKETS
   59 call: IDENTIFIER . OPEN_PARANTHESIS args CLOSE_PARANTHESIS

    OPEN_PARANTHESIS      shift, and go to state 62
    OPEN_SQUARE_BRACKETS  shift, and go to state 63

    $default  reduce using rule 37 (var)


State 43

   58 factor: NUM .

    $default  reduce using rule 58 (factor)


State 44

   24 statement: compound-stmt .

    $default  reduce using rule 24 (statement)


State 45

   21 statement-list: statement-list statement .

    $default  reduce using rule 21 (statement-list)


State 46

   23 statement: expression-stmt .

    $default  reduce using rule 23 (statement)


State 47

   25 statement: selection-stmt .

    $default  reduce using rule 25 (statement)


State 48

   26 statement: iteration-stmt .

    $default  reduce using rule 26 (statement)


State 49

   27 statement: return-stmt .

    $default  reduce using rule 27 (statement)


State 50

   28 expression-stmt: expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 64


State 51

   35 expression: var . ASSIGNMENT expression
   56 factor: var .

    ASSIGNMENT  shift, and go to state 65

    $default  reduce using rule 56 (factor)


State 52

   36 expression: simple-expression .

    $default  reduce using rule 36 (expression)


State 53

   39 simple-expression: additive-expression . relop additive-expression
   40                  | additive-expression .
   47 additive-expression: additive-expression . addop term

    PLUS                shift, and go to state 66
    MINUS               shift, and go to state 67
    GREATER_THAN        shift, and go to state 68
    GREATER_THAN_OR_EQ  shift, and go to state 69
    LESS_THAN           shift, and go to state 70
    LESS_THAN_OR_EQ     shift, and go to state 71
    EQ                  shift, and go to state 72
    NOT_EQ              shift, and go to state 73

    $default  reduce using rule 40 (simple-expression)

    relop  go to state 74
    addop  go to state 75


State 54

   48 additive-expression: term .
   51 term: term . mulop factor

    MUL  shift, and go to state 76
    DIV  shift, and go to state 77

    $default  reduce using rule 48 (additive-expression)

    mulop  go to state 78


State 55

   52 term: factor .

    $default  reduce using rule 52 (term)


State 56

   57 factor: call .

    $default  reduce using rule 57 (factor)


State 57

   30 selection-stmt: IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS statement
   31               | IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS statement ELSE statement

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 79
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 58

   33 return-stmt: RETURN SEMI_COLON .

    $default  reduce using rule 33 (return-stmt)


State 59

   34 return-stmt: RETURN expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 80


State 60

   32 iteration-stmt: WHILE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS statement

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 81
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 61

   55 factor: OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS  shift, and go to state 82


State 62

   59 call: IDENTIFIER OPEN_PARANTHESIS . args CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    $default  reduce using rule 61 (args)

    expression           go to state 83
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56
    args                 go to state 84
    arg-list             go to state 85


State 63

   38 var: IDENTIFIER OPEN_SQUARE_BRACKETS . expression CLOSE_SQUARE_BRACKETS

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 86
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 64

   28 expression-stmt: expression SEMI_COLON .

    $default  reduce using rule 28 (expression-stmt)


State 65

   35 expression: var ASSIGNMENT . expression

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 87
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 66

   49 addop: PLUS .

    $default  reduce using rule 49 (addop)


State 67

   50 addop: MINUS .

    $default  reduce using rule 50 (addop)


State 68

   43 relop: GREATER_THAN .

    $default  reduce using rule 43 (relop)


State 69

   44 relop: GREATER_THAN_OR_EQ .

    $default  reduce using rule 44 (relop)


State 70

   41 relop: LESS_THAN .

    $default  reduce using rule 41 (relop)


State 71

   42 relop: LESS_THAN_OR_EQ .

    $default  reduce using rule 42 (relop)


State 72

   45 relop: EQ .

    $default  reduce using rule 45 (relop)


State 73

   46 relop: NOT_EQ .

    $default  reduce using rule 46 (relop)


State 74

   39 simple-expression: additive-expression relop . additive-expression

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    var                  go to state 88
    additive-expression  go to state 89
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 75

   47 additive-expression: additive-expression addop . term

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    var     go to state 88
    term    go to state 90
    factor  go to state 55
    call    go to state 56


State 76

   53 mulop: MUL .

    $default  reduce using rule 53 (mulop)


State 77

   54 mulop: DIV .

    $default  reduce using rule 54 (mulop)


State 78

   51 term: term mulop . factor

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    var     go to state 88
    factor  go to state 91
    call    go to state 56


State 79

   30 selection-stmt: IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS statement
   31               | IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS statement ELSE statement

    CLOSE_PARANTHESIS  shift, and go to state 92


State 80

   34 return-stmt: RETURN expression SEMI_COLON .

    $default  reduce using rule 34 (return-stmt)


State 81

   32 iteration-stmt: WHILE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS statement

    CLOSE_PARANTHESIS  shift, and go to state 93


State 82

   55 factor: OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    $default  reduce using rule 55 (factor)


State 83

   63 arg-list: expression .

    $default  reduce using rule 63 (arg-list)


State 84

   59 call: IDENTIFIER OPEN_PARANTHESIS args . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS  shift, and go to state 94


State 85

   60 args: arg-list .
   62 arg-list: arg-list . COMMA expression

    COMMA  shift, and go to state 95

    $default  reduce using rule 60 (args)


State 86

   38 var: IDENTIFIER OPEN_SQUARE_BRACKETS expression . CLOSE_SQUARE_BRACKETS

    CLOSE_SQUARE_BRACKETS  shift, and go to state 96


State 87

   35 expression: var ASSIGNMENT expression .

    $default  reduce using rule 35 (expression)


State 88

   56 factor: var .

    $default  reduce using rule 56 (factor)


State 89

   39 simple-expression: additive-expression relop additive-expression .
   47 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67

    $default  reduce using rule 39 (simple-expression)

    addop  go to state 75


State 90

   47 additive-expression: additive-expression addop term .
   51 term: term . mulop factor

    MUL  shift, and go to state 76
    DIV  shift, and go to state 77

    $default  reduce using rule 47 (additive-expression)

    mulop  go to state 78


State 91

   51 term: term mulop factor .

    $default  reduce using rule 51 (term)


State 92

   30 selection-stmt: IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . statement
   31               | IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . statement ELSE statement

    IF                shift, and go to state 36
    RETURN            shift, and go to state 37
    WHILE             shift, and go to state 38
    SEMI_COLON        shift, and go to state 39
    OPEN_CURLY_BRACE  shift, and go to state 26
    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    compound-stmt        go to state 44
    statement            go to state 97
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 93

   32 iteration-stmt: WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . statement

    IF                shift, and go to state 36
    RETURN            shift, and go to state 37
    WHILE             shift, and go to state 38
    SEMI_COLON        shift, and go to state 39
    OPEN_CURLY_BRACE  shift, and go to state 26
    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    compound-stmt        go to state 44
    statement            go to state 98
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 94

   59 call: IDENTIFIER OPEN_PARANTHESIS args CLOSE_PARANTHESIS .

    $default  reduce using rule 59 (call)


State 95

   62 arg-list: arg-list COMMA . expression

    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    expression           go to state 99
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 96

   38 var: IDENTIFIER OPEN_SQUARE_BRACKETS expression CLOSE_SQUARE_BRACKETS .

    $default  reduce using rule 38 (var)


State 97

   30 selection-stmt: IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement .
   31               | IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement . ELSE statement

    ELSE  shift, and go to state 100

    ELSE      [reduce using rule 30 (selection-stmt)]
    $default  reduce using rule 30 (selection-stmt)


State 98

   32 iteration-stmt: WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement .

    $default  reduce using rule 32 (iteration-stmt)


State 99

   62 arg-list: arg-list COMMA expression .

    $default  reduce using rule 62 (arg-list)


State 100

   31 selection-stmt: IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement ELSE . statement

    IF                shift, and go to state 36
    RETURN            shift, and go to state 37
    WHILE             shift, and go to state 38
    SEMI_COLON        shift, and go to state 39
    OPEN_CURLY_BRACE  shift, and go to state 26
    OPEN_PARANTHESIS  shift, and go to state 41
    IDENTIFIER        shift, and go to state 42
    NUM               shift, and go to state 43

    compound-stmt        go to state 44
    statement            go to state 101
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 101

   31 selection-stmt: IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS statement ELSE statement .

    $default  reduce using rule 31 (selection-stmt)
